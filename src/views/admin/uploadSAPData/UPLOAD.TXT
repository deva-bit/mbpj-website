import { EditOutlined, PlusOutlined, SaveOutlined, UploadOutlined } from "@ant-design/icons";
import { Button, Card, DatePicker, Form, Input, InputNumber, Popconfirm, Spin, Table, Typography, Upload, message } from "antd";
import { useRef, useState, } from "react";
import './UploadSAPData.css'
import type { ColumnsType, TableProps } from 'antd/es/table';
import type { UploadProps } from 'antd';

interface Item {
  key: string;
  employeeNumber: string;
  employeeName: number;
  amount: string;
  code: string;
}
const originData: Item[] = [];
for (let i = 0; i < 100; i++) {
  originData.push({
    key: i.toString(),
    employeeNumber: `Edward ${i}`,
    employeeName: 32,
    amount: `London Park no. ${i}`,
    code: `London Park no. ${i}`,
  });
}
interface EditableCellProps extends React.HTMLAttributes<HTMLElement> {
  editing: boolean;
  dataIndex: string;
  title: any;
  inputType: 'number' | 'text';
  record: Item;
  index: number;
  children: React.ReactNode;
}

const EditableCell: React.FC<EditableCellProps> = ({
  editing,
  dataIndex,
  title,
  inputType,
  record,
  index,
  children,
  ...restProps
}) => {
  const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;

  return (
    <td {...restProps}>
      {editing ? (
        <Form.Item
          name={dataIndex}
          style={{ margin: 0 }}
          rules={[
            {
              required: true,
              message: `Please Input ${title}!`,
            },
          ]}
        >
          {inputNode}
        </Form.Item>
      ) : (
        children
      )}
    </td>
  );
};
const UplodSAPData = () => {
  const [form] = Form.useForm();
  const [data, setData] = useState(originData);
  const [editingKey, setEditingKey] = useState('');

  const isEditing = (record: Item) => record.key === editingKey;
 
  const edit = (record: Partial<Item> & { key: React.Key }) => { 
    console.log(record)
    form.setFieldsValue({  ...record });
    setEditingKey(record.key);
  };

  const cancel = () => {
    setEditingKey('');
  };

  const save = async (key: React.Key) => {
    try {
      const row = (await form.validateFields()) as Item;

      const newData = [...data];
      const index = newData.findIndex((item) => key === item.key);
      if (index > -1) {
        const item = newData[index];
        newData.splice(index, 1, {
          ...item,
          ...row,
        });
        setData(newData);
        setEditingKey('');
      } else {
        newData.push(row);
        setData(newData);
        setEditingKey('');
      }
    } catch (errInfo) {
      console.log('Validate Failed:', errInfo);
    }
  };

  const columns = [
    {
      title: 'No',
      dataIndex: 'id',
      key: 'id',
    },
    {
      title: 'Employee Number',
      dataIndex: 'employeeNumber',
    
      editable: true,
    },
    {
      title: 'Employee Name',
      dataIndex: 'employeeName',
      editable: true,
    },
    {
      title: 'Amount',
      dataIndex: 'amount',
      editable: true,
    },
    {
      title: 'Code',
      dataIndex: 'code',
      editable: true,
    },
    {
      title: 'operation',
      dataIndex: 'operation',
      render: (_: any, record: Item) => {
        const editable = isEditing(record);
        return editable ? (
          <span>
            <Typography.Link onClick={() => save(record.key)} style={{ marginRight: 8 }}>
              Save
            </Typography.Link>
            <Popconfirm title="Sure to cancel?" onConfirm={cancel}>
              <a>Cancel</a>
            </Popconfirm>
          </span>
        ) : (
          <Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)}>
            Edit
          </Typography.Link>
        );
      },
    },
  ];

  const mergedColumns = columns.map((col) => {
    if (!col.editable) {
      return col;
    }
    return {
      ...col,
      onCell: (record: Item) => ({
        record,
        inputType: col.dataIndex === 'age' ? 'number' : 'text',
        dataIndex: col.dataIndex,
        title: col.title,
        editing: isEditing(record),
      }),
    };
  });


  return (
    <div>
      {/* <Spin  tip="Loading..."> */}
      <Card title="Upload SAP Data">
        <Button type="primary" className="buttonStyle"><SaveOutlined rev={undefined} /> Save</Button>
        <DatePicker picker="month" style={{ float: 'right', marginBottom: '20px' }} />
        {/* <Upload {...props}>
    <Button icon={<UploadOutlined rev={undefined} />}>Click to Upload</Button>
  </Upload> */}

        <Table components={{
          body: {
            cell: EditableCell,
          },
        }}
          bordered
          dataSource={data}
          columns={mergedColumns}
          rowClassName="editable-row"
          pagination={{
            onChange: cancel,
          }} />
      </Card>



      {/* </Spin> */}
    </div>
  );
}
export default UplodSAPData;

